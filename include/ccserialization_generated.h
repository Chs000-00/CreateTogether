// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CCSERIALIZATION_CTSERIALIZE_H_
#define FLATBUFFERS_GENERATED_CCSERIALIZATION_CTSERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace CTSerialize {

struct CCPos;

struct CCPosI;

struct ObjectFlip;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) CCPos FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  CCPos()
      : x_(0),
        y_(0) {
  }
  CCPos(float _x, float _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(CCPos, 8);

/// A version of sCCPos using int instead of float
FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) CCPosI FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  CCPosI()
      : x_(0),
        y_(0) {
  }
  CCPosI(int32_t _x, int32_t _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  int32_t x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(CCPosI, 8);

/// Flip state
FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) ObjectFlip FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t flipX_;
  uint8_t flipY_;

 public:
  ObjectFlip()
      : flipX_(0),
        flipY_(0) {
  }
  ObjectFlip(bool _flipX, bool _flipY)
      : flipX_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_flipX))),
        flipY_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_flipY))) {
  }
  bool flipX() const {
    return ::flatbuffers::EndianScalar(flipX_) != 0;
  }
  bool flipY() const {
    return ::flatbuffers::EndianScalar(flipY_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(ObjectFlip, 2);

}  // namespace CTSerialize

#endif  // FLATBUFFERS_GENERATED_CCSERIALIZATION_CTSERIALIZE_H_
