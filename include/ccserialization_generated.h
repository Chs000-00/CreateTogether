// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CCSERIALIZATION_CTSERIALIZE_H_
#define FLATBUFFERS_GENERATED_CCSERIALIZATION_CTSERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace CTSerialize {

struct CCPos;

struct CCPosI;

struct ObjectFlip;

struct CCHsvValue;

struct CCColor3B;

inline const ::flatbuffers::TypeTable *CCPosTypeTable();

inline const ::flatbuffers::TypeTable *CCPosITypeTable();

inline const ::flatbuffers::TypeTable *ObjectFlipTypeTable();

inline const ::flatbuffers::TypeTable *CCHsvValueTypeTable();

inline const ::flatbuffers::TypeTable *CCColor3BTypeTable();

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) CCPos FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CCPosTypeTable();
  }
  CCPos()
      : x_(0),
        y_(0) {
  }
  CCPos(float _x, float _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(CCPos, 8);

/// A version of sCCPos using int instead of float
FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) CCPosI FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CCPosITypeTable();
  }
  CCPosI()
      : x_(0),
        y_(0) {
  }
  CCPosI(int32_t _x, int32_t _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  int32_t x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(CCPosI, 8);

/// Flip state
FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) ObjectFlip FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t flipX_;
  uint8_t flipY_;

 public:
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ObjectFlipTypeTable();
  }
  ObjectFlip()
      : flipX_(0),
        flipY_(0) {
  }
  ObjectFlip(bool _flipX, bool _flipY)
      : flipX_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_flipX))),
        flipY_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_flipY))) {
  }
  bool flipX() const {
    return ::flatbuffers::EndianScalar(flipX_) != 0;
  }
  bool flipY() const {
    return ::flatbuffers::EndianScalar(flipY_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(ObjectFlip, 2);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) CCHsvValue FLATBUFFERS_FINAL_CLASS {
 private:
  float h_;
  float s_;
  float v_;
  uint8_t absoluteSaturation_;
  uint8_t absoluteBrightness_;
  int16_t padding0__;

 public:
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CCHsvValueTypeTable();
  }
  CCHsvValue()
      : h_(0),
        s_(0),
        v_(0),
        absoluteSaturation_(0),
        absoluteBrightness_(0),
        padding0__(0) {
    (void)padding0__;
  }
  CCHsvValue(float _h, float _s, float _v, bool _absoluteSaturation, bool _absoluteBrightness)
      : h_(::flatbuffers::EndianScalar(_h)),
        s_(::flatbuffers::EndianScalar(_s)),
        v_(::flatbuffers::EndianScalar(_v)),
        absoluteSaturation_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_absoluteSaturation))),
        absoluteBrightness_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_absoluteBrightness))),
        padding0__(0) {
    (void)padding0__;
  }
  float h() const {
    return ::flatbuffers::EndianScalar(h_);
  }
  float s() const {
    return ::flatbuffers::EndianScalar(s_);
  }
  float v() const {
    return ::flatbuffers::EndianScalar(v_);
  }
  bool absoluteSaturation() const {
    return ::flatbuffers::EndianScalar(absoluteSaturation_) != 0;
  }
  bool absoluteBrightness() const {
    return ::flatbuffers::EndianScalar(absoluteBrightness_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(CCHsvValue, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) CCColor3B FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t r_;
  uint8_t g_;
  uint8_t b_;

 public:
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CCColor3BTypeTable();
  }
  CCColor3B()
      : r_(0),
        g_(0),
        b_(0) {
  }
  CCColor3B(uint8_t _r, uint8_t _g, uint8_t _b)
      : r_(::flatbuffers::EndianScalar(_r)),
        g_(::flatbuffers::EndianScalar(_g)),
        b_(::flatbuffers::EndianScalar(_b)) {
  }
  uint8_t r() const {
    return ::flatbuffers::EndianScalar(r_);
  }
  uint8_t g() const {
    return ::flatbuffers::EndianScalar(g_);
  }
  uint8_t b() const {
    return ::flatbuffers::EndianScalar(b_);
  }
};
FLATBUFFERS_STRUCT_END(CCColor3B, 3);

inline const ::flatbuffers::TypeTable *CCPosTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const int64_t values[] = { 0, 4, 8 };
  static const char * const names[] = {
    "x",
    "y"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_STRUCT, 2, type_codes, nullptr, nullptr, values, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *CCPosITypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 }
  };
  static const int64_t values[] = { 0, 4, 8 };
  static const char * const names[] = {
    "x",
    "y"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_STRUCT, 2, type_codes, nullptr, nullptr, values, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ObjectFlipTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const int64_t values[] = { 0, 1, 2 };
  static const char * const names[] = {
    "flipX",
    "flipY"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_STRUCT, 2, type_codes, nullptr, nullptr, values, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *CCHsvValueTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const int64_t values[] = { 0, 4, 8, 12, 13, 16 };
  static const char * const names[] = {
    "h",
    "s",
    "v",
    "absoluteSaturation",
    "absoluteBrightness"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_STRUCT, 5, type_codes, nullptr, nullptr, values, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *CCColor3BTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const int64_t values[] = { 0, 1, 2, 3 };
  static const char * const names[] = {
    "r",
    "g",
    "b"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_STRUCT, 3, type_codes, nullptr, nullptr, values, names
  };
  return &tt;
}

}  // namespace CTSerialize

#endif  // FLATBUFFERS_GENERATED_CCSERIALIZATION_CTSERIALIZE_H_
