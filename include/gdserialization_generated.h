// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GDSERIALIZATION_CTSERIALIZE_H_
#define FLATBUFFERS_GENERATED_GDSERIALIZATION_CTSERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "ccserialization_generated.h"

namespace CTSerialize {

struct GDGameObjectMin;
struct GDGameObjectMinBuilder;

inline const ::flatbuffers::TypeTable *GDGameObjectMinTypeTable();

enum Speed : int8_t {
  Speed_Normal = 0,
  Speed_Slow = 1,
  Speed_Fast = 2,
  Speed_Faster = 3,
  Speed_Fastest = 4,
  Speed_MIN = Speed_Normal,
  Speed_MAX = Speed_Fastest
};

inline const Speed (&EnumValuesSpeed())[5] {
  static const Speed values[] = {
    Speed_Normal,
    Speed_Slow,
    Speed_Fast,
    Speed_Faster,
    Speed_Fastest
  };
  return values;
}

inline const char * const *EnumNamesSpeed() {
  static const char * const names[6] = {
    "Normal",
    "Slow",
    "Fast",
    "Faster",
    "Fastest",
    nullptr
  };
  return names;
}

inline const char *EnumNameSpeed(Speed e) {
  if (::flatbuffers::IsOutRange(e, Speed_Normal, Speed_Fastest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSpeed()[index];
}

enum UndoCommand : int8_t {
  UndoCommand_Invalid = 0,
  UndoCommand_Delete = 1,
  UndoCommand_New = 2,
  UndoCommand_Paste = 3,
  UndoCommand_DeleteMulti = 4,
  UndoCommand_Transform = 5,
  UndoCommand_Select = 6,
  UndoCommand_MIN = UndoCommand_Invalid,
  UndoCommand_MAX = UndoCommand_Select
};

inline const UndoCommand (&EnumValuesUndoCommand())[7] {
  static const UndoCommand values[] = {
    UndoCommand_Invalid,
    UndoCommand_Delete,
    UndoCommand_New,
    UndoCommand_Paste,
    UndoCommand_DeleteMulti,
    UndoCommand_Transform,
    UndoCommand_Select
  };
  return values;
}

inline const char * const *EnumNamesUndoCommand() {
  static const char * const names[8] = {
    "Invalid",
    "Delete",
    "New",
    "Paste",
    "DeleteMulti",
    "Transform",
    "Select",
    nullptr
  };
  return names;
}

inline const char *EnumNameUndoCommand(UndoCommand e) {
  if (::flatbuffers::IsOutRange(e, UndoCommand_Invalid, UndoCommand_Select)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesUndoCommand()[index];
}

/// The data a GD Game Object has when placed in the editor
struct GDGameObjectMin FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GDGameObjectMinBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GDGameObjectMinTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIQUEID = 4,
    VT_OBJID = 6,
    VT_POS = 8,
    VT_ROTATION = 10,
    VT_ISHIGHDETAIL = 12,
    VT_NOGLOW = 14,
    VT_NOENTER = 16,
    VT_FLIP = 18
  };
  const ::flatbuffers::String *uniqueID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNIQUEID);
  }
  uint64_t objID() const {
    return GetField<uint64_t>(VT_OBJID, 0);
  }
  const CTSerialize::CCPosI *pos() const {
    return GetStruct<const CTSerialize::CCPosI *>(VT_POS);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  bool isHighDetail() const {
    return GetField<uint8_t>(VT_ISHIGHDETAIL, 0) != 0;
  }
  bool noGlow() const {
    return GetField<uint8_t>(VT_NOGLOW, 0) != 0;
  }
  bool noEnter() const {
    return GetField<uint8_t>(VT_NOENTER, 0) != 0;
  }
  const CTSerialize::ObjectFlip *flip() const {
    return GetStruct<const CTSerialize::ObjectFlip *>(VT_FLIP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNIQUEID) &&
           verifier.VerifyString(uniqueID()) &&
           VerifyField<uint64_t>(verifier, VT_OBJID, 8) &&
           VerifyField<CTSerialize::CCPosI>(verifier, VT_POS, 4) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyField<uint8_t>(verifier, VT_ISHIGHDETAIL, 1) &&
           VerifyField<uint8_t>(verifier, VT_NOGLOW, 1) &&
           VerifyField<uint8_t>(verifier, VT_NOENTER, 1) &&
           VerifyField<CTSerialize::ObjectFlip>(verifier, VT_FLIP, 1) &&
           verifier.EndTable();
  }
};

struct GDGameObjectMinBuilder {
  typedef GDGameObjectMin Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uniqueID(::flatbuffers::Offset<::flatbuffers::String> uniqueID) {
    fbb_.AddOffset(GDGameObjectMin::VT_UNIQUEID, uniqueID);
  }
  void add_objID(uint64_t objID) {
    fbb_.AddElement<uint64_t>(GDGameObjectMin::VT_OBJID, objID, 0);
  }
  void add_pos(const CTSerialize::CCPosI *pos) {
    fbb_.AddStruct(GDGameObjectMin::VT_POS, pos);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(GDGameObjectMin::VT_ROTATION, rotation, 0.0f);
  }
  void add_isHighDetail(bool isHighDetail) {
    fbb_.AddElement<uint8_t>(GDGameObjectMin::VT_ISHIGHDETAIL, static_cast<uint8_t>(isHighDetail), 0);
  }
  void add_noGlow(bool noGlow) {
    fbb_.AddElement<uint8_t>(GDGameObjectMin::VT_NOGLOW, static_cast<uint8_t>(noGlow), 0);
  }
  void add_noEnter(bool noEnter) {
    fbb_.AddElement<uint8_t>(GDGameObjectMin::VT_NOENTER, static_cast<uint8_t>(noEnter), 0);
  }
  void add_flip(const CTSerialize::ObjectFlip *flip) {
    fbb_.AddStruct(GDGameObjectMin::VT_FLIP, flip);
  }
  explicit GDGameObjectMinBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GDGameObjectMin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GDGameObjectMin>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GDGameObjectMin> CreateGDGameObjectMin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> uniqueID = 0,
    uint64_t objID = 0,
    const CTSerialize::CCPosI *pos = nullptr,
    float rotation = 0.0f,
    bool isHighDetail = false,
    bool noGlow = false,
    bool noEnter = false,
    const CTSerialize::ObjectFlip *flip = nullptr) {
  GDGameObjectMinBuilder builder_(_fbb);
  builder_.add_objID(objID);
  builder_.add_flip(flip);
  builder_.add_rotation(rotation);
  builder_.add_pos(pos);
  builder_.add_uniqueID(uniqueID);
  builder_.add_noEnter(noEnter);
  builder_.add_noGlow(noGlow);
  builder_.add_isHighDetail(isHighDetail);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GDGameObjectMin> CreateGDGameObjectMinDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *uniqueID = nullptr,
    uint64_t objID = 0,
    const CTSerialize::CCPosI *pos = nullptr,
    float rotation = 0.0f,
    bool isHighDetail = false,
    bool noGlow = false,
    bool noEnter = false,
    const CTSerialize::ObjectFlip *flip = nullptr) {
  auto uniqueID__ = uniqueID ? _fbb.CreateString(uniqueID) : 0;
  return CTSerialize::CreateGDGameObjectMin(
      _fbb,
      uniqueID__,
      objID,
      pos,
      rotation,
      isHighDetail,
      noGlow,
      noEnter,
      flip);
}

inline const ::flatbuffers::TypeTable *SpeedTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::SpeedTypeTable
  };
  static const char * const names[] = {
    "Normal",
    "Slow",
    "Fast",
    "Faster",
    "Fastest"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *UndoCommandTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::UndoCommandTypeTable
  };
  static const char * const names[] = {
    "Invalid",
    "Delete",
    "New",
    "Paste",
    "DeleteMulti",
    "Transform",
    "Select"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 7, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GDGameObjectMinTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::CCPosITypeTable,
    CTSerialize::ObjectFlipTypeTable
  };
  static const char * const names[] = {
    "uniqueID",
    "objID",
    "pos",
    "rotation",
    "isHighDetail",
    "noGlow",
    "noEnter",
    "flip"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 8, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace CTSerialize

#endif  // FLATBUFFERS_GENERATED_GDSERIALIZATION_CTSERIALIZE_H_
