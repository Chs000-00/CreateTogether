// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GDSERIALIZATION_CTSERIALIZE_H_
#define FLATBUFFERS_GENERATED_GDSERIALIZATION_CTSERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "ccserialization_generated.h"

namespace CTSerialize {

struct GDGameObjectMin;
struct GDGameObjectMinBuilder;

struct GDWaveObject;
struct GDWaveObjectBuilder;

inline const ::flatbuffers::TypeTable *GDGameObjectMinTypeTable();

inline const ::flatbuffers::TypeTable *GDWaveObjectTypeTable();

enum Speed : int8_t {
  Speed_Normal = 0,
  Speed_Slow = 1,
  Speed_Fast = 2,
  Speed_Faster = 3,
  Speed_Fastest = 4,
  Speed_MIN = Speed_Normal,
  Speed_MAX = Speed_Fastest
};

inline const Speed (&EnumValuesSpeed())[5] {
  static const Speed values[] = {
    Speed_Normal,
    Speed_Slow,
    Speed_Fast,
    Speed_Faster,
    Speed_Fastest
  };
  return values;
}

inline const char * const *EnumNamesSpeed() {
  static const char * const names[6] = {
    "Normal",
    "Slow",
    "Fast",
    "Faster",
    "Fastest",
    nullptr
  };
  return names;
}

inline const char *EnumNameSpeed(Speed e) {
  if (::flatbuffers::IsOutRange(e, Speed_Normal, Speed_Fastest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSpeed()[index];
}

enum UndoCommand : int8_t {
  UndoCommand_Delete = 1,
  UndoCommand_New = 2,
  UndoCommand_Paste = 3,
  UndoCommand_DeleteMulti = 4,
  UndoCommand_Transform = 5,
  UndoCommand_Select = 6,
  UndoCommand_MIN = UndoCommand_Delete,
  UndoCommand_MAX = UndoCommand_Select
};

inline const UndoCommand (&EnumValuesUndoCommand())[6] {
  static const UndoCommand values[] = {
    UndoCommand_Delete,
    UndoCommand_New,
    UndoCommand_Paste,
    UndoCommand_DeleteMulti,
    UndoCommand_Transform,
    UndoCommand_Select
  };
  return values;
}

inline const char * const *EnumNamesUndoCommand() {
  static const char * const names[7] = {
    "Delete",
    "New",
    "Paste",
    "DeleteMulti",
    "Transform",
    "Select",
    nullptr
  };
  return names;
}

inline const char *EnumNameUndoCommand(UndoCommand e) {
  if (::flatbuffers::IsOutRange(e, UndoCommand_Delete, UndoCommand_Select)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(UndoCommand_Delete);
  return EnumNamesUndoCommand()[index];
}

enum ArtType : int8_t {
  ArtType_Background = 0,
  ArtType_Ground = 1,
  ArtType_Middleground = 2,
  ArtType_MIN = ArtType_Background,
  ArtType_MAX = ArtType_Middleground
};

inline const ArtType (&EnumValuesArtType())[3] {
  static const ArtType values[] = {
    ArtType_Background,
    ArtType_Ground,
    ArtType_Middleground
  };
  return values;
}

inline const char * const *EnumNamesArtType() {
  static const char * const names[4] = {
    "Background",
    "Ground",
    "Middleground",
    nullptr
  };
  return names;
}

inline const char *EnumNameArtType(ArtType e) {
  if (::flatbuffers::IsOutRange(e, ArtType_Background, ArtType_Middleground)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesArtType()[index];
}

enum SongSelectType : int8_t {
  SongSelectType_Default = 0,
  SongSelectType_Custom = 1,
  SongSelectType_MIN = SongSelectType_Default,
  SongSelectType_MAX = SongSelectType_Custom
};

inline const SongSelectType (&EnumValuesSongSelectType())[2] {
  static const SongSelectType values[] = {
    SongSelectType_Default,
    SongSelectType_Custom
  };
  return values;
}

inline const char * const *EnumNamesSongSelectType() {
  static const char * const names[3] = {
    "Default",
    "Custom",
    nullptr
  };
  return names;
}

inline const char *EnumNameSongSelectType(SongSelectType e) {
  if (::flatbuffers::IsOutRange(e, SongSelectType_Default, SongSelectType_Custom)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSongSelectType()[index];
}

enum EditCommand : int8_t {
  EditCommand_SmallLeft = 1,
  EditCommand_SmallRight = 2,
  EditCommand_SmallUp = 3,
  EditCommand_SmallDown = 4,
  EditCommand_Left = 5,
  EditCommand_Right = 6,
  EditCommand_Up = 7,
  EditCommand_Down = 8,
  EditCommand_BigLeft = 9,
  EditCommand_BigRight = 10,
  EditCommand_BigUp = 11,
  EditCommand_BigDown = 12,
  EditCommand_TinyLeft = 13,
  EditCommand_TinyRight = 14,
  EditCommand_TinyUp = 15,
  EditCommand_TinyDown = 16,
  EditCommand_HalfLeft = 17,
  EditCommand_HalfRight = 18,
  EditCommand_HalfUp = 19,
  EditCommand_HalfDown = 20,
  EditCommand_FlipX = 21,
  EditCommand_FlipY = 22,
  EditCommand_RotateCW = 23,
  EditCommand_RotateCCW = 24,
  EditCommand_RotateCW45 = 25,
  EditCommand_RotateCCW45 = 26,
  EditCommand_RotateFree = 27,
  EditCommand_RotateSnap = 28,
  EditCommand_Scale = 29,
  EditCommand_ScaleXY = 30,
  EditCommand_Skew = 31,
  EditCommand_MIN = EditCommand_SmallLeft,
  EditCommand_MAX = EditCommand_Skew
};

inline const EditCommand (&EnumValuesEditCommand())[31] {
  static const EditCommand values[] = {
    EditCommand_SmallLeft,
    EditCommand_SmallRight,
    EditCommand_SmallUp,
    EditCommand_SmallDown,
    EditCommand_Left,
    EditCommand_Right,
    EditCommand_Up,
    EditCommand_Down,
    EditCommand_BigLeft,
    EditCommand_BigRight,
    EditCommand_BigUp,
    EditCommand_BigDown,
    EditCommand_TinyLeft,
    EditCommand_TinyRight,
    EditCommand_TinyUp,
    EditCommand_TinyDown,
    EditCommand_HalfLeft,
    EditCommand_HalfRight,
    EditCommand_HalfUp,
    EditCommand_HalfDown,
    EditCommand_FlipX,
    EditCommand_FlipY,
    EditCommand_RotateCW,
    EditCommand_RotateCCW,
    EditCommand_RotateCW45,
    EditCommand_RotateCCW45,
    EditCommand_RotateFree,
    EditCommand_RotateSnap,
    EditCommand_Scale,
    EditCommand_ScaleXY,
    EditCommand_Skew
  };
  return values;
}

inline const char * const *EnumNamesEditCommand() {
  static const char * const names[32] = {
    "SmallLeft",
    "SmallRight",
    "SmallUp",
    "SmallDown",
    "Left",
    "Right",
    "Up",
    "Down",
    "BigLeft",
    "BigRight",
    "BigUp",
    "BigDown",
    "TinyLeft",
    "TinyRight",
    "TinyUp",
    "TinyDown",
    "HalfLeft",
    "HalfRight",
    "HalfUp",
    "HalfDown",
    "FlipX",
    "FlipY",
    "RotateCW",
    "RotateCCW",
    "RotateCW45",
    "RotateCCW45",
    "RotateFree",
    "RotateSnap",
    "Scale",
    "ScaleXY",
    "Skew",
    nullptr
  };
  return names;
}

inline const char *EnumNameEditCommand(EditCommand e) {
  if (::flatbuffers::IsOutRange(e, EditCommand_SmallLeft, EditCommand_Skew)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(EditCommand_SmallLeft);
  return EnumNamesEditCommand()[index];
}

enum SettingOptionType : int8_t {
  SettingOptionType_StartMini = 0,
  SettingOptionType_StartDual = 1,
  SettingOptionType_TwoPlayerMode = 2,
  SettingOptionType_MirrorMode = 4,
  SettingOptionType_IsFlipped = 5,
  SettingOptionType_RotateGameplay = 6,
  SettingOptionType_ReverseGameplay = 7,
  SettingOptionType_AllowMultiRotation = 8,
  SettingOptionType_EnablePlayerSqueeze = 9,
  SettingOptionType_FixGravityBug = 10,
  SettingOptionType_FixNegativeScale = 11,
  SettingOptionType_FixRobotJump = 12,
  SettingOptionType_SpawnGroup = 13,
  SettingOptionType_DynamicLevelheight = 14,
  SettingOptionType_SortGroups = 15,
  SettingOptionType_FixRadiusCollision = 16,
  SettingOptionType_Enable22Changes = 17,
  SettingOptionType_AllowStaticRotate = 18,
  SettingOptionType_ReverseSync = 19,
  SettingOptionType_NoTimePenalty = 20,
  SettingOptionType_propkA45 = 22,
  SettingOptionType_MIN = SettingOptionType_StartMini,
  SettingOptionType_MAX = SettingOptionType_propkA45
};

inline const SettingOptionType (&EnumValuesSettingOptionType())[21] {
  static const SettingOptionType values[] = {
    SettingOptionType_StartMini,
    SettingOptionType_StartDual,
    SettingOptionType_TwoPlayerMode,
    SettingOptionType_MirrorMode,
    SettingOptionType_IsFlipped,
    SettingOptionType_RotateGameplay,
    SettingOptionType_ReverseGameplay,
    SettingOptionType_AllowMultiRotation,
    SettingOptionType_EnablePlayerSqueeze,
    SettingOptionType_FixGravityBug,
    SettingOptionType_FixNegativeScale,
    SettingOptionType_FixRobotJump,
    SettingOptionType_SpawnGroup,
    SettingOptionType_DynamicLevelheight,
    SettingOptionType_SortGroups,
    SettingOptionType_FixRadiusCollision,
    SettingOptionType_Enable22Changes,
    SettingOptionType_AllowStaticRotate,
    SettingOptionType_ReverseSync,
    SettingOptionType_NoTimePenalty,
    SettingOptionType_propkA45
  };
  return values;
}

inline const char * const *EnumNamesSettingOptionType() {
  static const char * const names[24] = {
    "StartMini",
    "StartDual",
    "TwoPlayerMode",
    "",
    "MirrorMode",
    "IsFlipped",
    "RotateGameplay",
    "ReverseGameplay",
    "AllowMultiRotation",
    "EnablePlayerSqueeze",
    "FixGravityBug",
    "FixNegativeScale",
    "FixRobotJump",
    "SpawnGroup",
    "DynamicLevelheight",
    "SortGroups",
    "FixRadiusCollision",
    "Enable22Changes",
    "AllowStaticRotate",
    "ReverseSync",
    "NoTimePenalty",
    "",
    "propkA45",
    nullptr
  };
  return names;
}

inline const char *EnumNameSettingOptionType(SettingOptionType e) {
  if (::flatbuffers::IsOutRange(e, SettingOptionType_StartMini, SettingOptionType_propkA45)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSettingOptionType()[index];
}

/// The data a GD Game Object has when placed in the editor
struct GDGameObjectMin FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GDGameObjectMinBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GDGameObjectMinTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIQUEID = 4,
    VT_OBJID = 6,
    VT_POS = 8,
    VT_ROTATION = 10,
    VT_ISHIGHDETAIL = 12,
    VT_NOGLOW = 14,
    VT_NOENTER = 16,
    VT_FLIP = 18,
    VT_SCALE = 20
  };
  const ::flatbuffers::String *uniqueID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNIQUEID);
  }
  uint64_t objID() const {
    return GetField<uint64_t>(VT_OBJID, 0);
  }
  const CTSerialize::CCPosI *pos() const {
    return GetStruct<const CTSerialize::CCPosI *>(VT_POS);
  }
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  bool isHighDetail() const {
    return GetField<uint8_t>(VT_ISHIGHDETAIL, 0) != 0;
  }
  bool noGlow() const {
    return GetField<uint8_t>(VT_NOGLOW, 0) != 0;
  }
  bool noEnter() const {
    return GetField<uint8_t>(VT_NOENTER, 0) != 0;
  }
  const CTSerialize::ObjectFlip *flip() const {
    return GetStruct<const CTSerialize::ObjectFlip *>(VT_FLIP);
  }
  const CTSerialize::NodeScale *scale() const {
    return GetStruct<const CTSerialize::NodeScale *>(VT_SCALE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNIQUEID) &&
           verifier.VerifyString(uniqueID()) &&
           VerifyField<uint64_t>(verifier, VT_OBJID, 8) &&
           VerifyField<CTSerialize::CCPosI>(verifier, VT_POS, 4) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyField<uint8_t>(verifier, VT_ISHIGHDETAIL, 1) &&
           VerifyField<uint8_t>(verifier, VT_NOGLOW, 1) &&
           VerifyField<uint8_t>(verifier, VT_NOENTER, 1) &&
           VerifyField<CTSerialize::ObjectFlip>(verifier, VT_FLIP, 1) &&
           VerifyField<CTSerialize::NodeScale>(verifier, VT_SCALE, 4) &&
           verifier.EndTable();
  }
};

struct GDGameObjectMinBuilder {
  typedef GDGameObjectMin Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uniqueID(::flatbuffers::Offset<::flatbuffers::String> uniqueID) {
    fbb_.AddOffset(GDGameObjectMin::VT_UNIQUEID, uniqueID);
  }
  void add_objID(uint64_t objID) {
    fbb_.AddElement<uint64_t>(GDGameObjectMin::VT_OBJID, objID, 0);
  }
  void add_pos(const CTSerialize::CCPosI *pos) {
    fbb_.AddStruct(GDGameObjectMin::VT_POS, pos);
  }
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(GDGameObjectMin::VT_ROTATION, rotation, 0.0f);
  }
  void add_isHighDetail(bool isHighDetail) {
    fbb_.AddElement<uint8_t>(GDGameObjectMin::VT_ISHIGHDETAIL, static_cast<uint8_t>(isHighDetail), 0);
  }
  void add_noGlow(bool noGlow) {
    fbb_.AddElement<uint8_t>(GDGameObjectMin::VT_NOGLOW, static_cast<uint8_t>(noGlow), 0);
  }
  void add_noEnter(bool noEnter) {
    fbb_.AddElement<uint8_t>(GDGameObjectMin::VT_NOENTER, static_cast<uint8_t>(noEnter), 0);
  }
  void add_flip(const CTSerialize::ObjectFlip *flip) {
    fbb_.AddStruct(GDGameObjectMin::VT_FLIP, flip);
  }
  void add_scale(const CTSerialize::NodeScale *scale) {
    fbb_.AddStruct(GDGameObjectMin::VT_SCALE, scale);
  }
  explicit GDGameObjectMinBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GDGameObjectMin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GDGameObjectMin>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GDGameObjectMin> CreateGDGameObjectMin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> uniqueID = 0,
    uint64_t objID = 0,
    const CTSerialize::CCPosI *pos = nullptr,
    float rotation = 0.0f,
    bool isHighDetail = false,
    bool noGlow = false,
    bool noEnter = false,
    const CTSerialize::ObjectFlip *flip = nullptr,
    const CTSerialize::NodeScale *scale = nullptr) {
  GDGameObjectMinBuilder builder_(_fbb);
  builder_.add_objID(objID);
  builder_.add_scale(scale);
  builder_.add_flip(flip);
  builder_.add_rotation(rotation);
  builder_.add_pos(pos);
  builder_.add_uniqueID(uniqueID);
  builder_.add_noEnter(noEnter);
  builder_.add_noGlow(noGlow);
  builder_.add_isHighDetail(isHighDetail);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GDGameObjectMin> CreateGDGameObjectMinDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *uniqueID = nullptr,
    uint64_t objID = 0,
    const CTSerialize::CCPosI *pos = nullptr,
    float rotation = 0.0f,
    bool isHighDetail = false,
    bool noGlow = false,
    bool noEnter = false,
    const CTSerialize::ObjectFlip *flip = nullptr,
    const CTSerialize::NodeScale *scale = nullptr) {
  auto uniqueID__ = uniqueID ? _fbb.CreateString(uniqueID) : 0;
  return CTSerialize::CreateGDGameObjectMin(
      _fbb,
      uniqueID__,
      objID,
      pos,
      rotation,
      isHighDetail,
      noGlow,
      noEnter,
      flip,
      scale);
}

struct GDWaveObject FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GDWaveObjectBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GDWaveObjectTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CURSORCOLOR1 = 4,
    VT_CURSORCOLOR2 = 6,
    VT_CURSORID = 8,
    VT_CURSORHASGLOW = 10,
    VT_CURSORGLOWCOLOR = 12
  };
  int32_t cursorColor1() const {
    return GetField<int32_t>(VT_CURSORCOLOR1, 0);
  }
  int32_t cursorColor2() const {
    return GetField<int32_t>(VT_CURSORCOLOR2, 0);
  }
  int32_t cursorID() const {
    return GetField<int32_t>(VT_CURSORID, 0);
  }
  bool cursorHasGlow() const {
    return GetField<uint8_t>(VT_CURSORHASGLOW, 0) != 0;
  }
  int32_t cursorGlowColor() const {
    return GetField<int32_t>(VT_CURSORGLOWCOLOR, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CURSORCOLOR1, 4) &&
           VerifyField<int32_t>(verifier, VT_CURSORCOLOR2, 4) &&
           VerifyField<int32_t>(verifier, VT_CURSORID, 4) &&
           VerifyField<uint8_t>(verifier, VT_CURSORHASGLOW, 1) &&
           VerifyField<int32_t>(verifier, VT_CURSORGLOWCOLOR, 4) &&
           verifier.EndTable();
  }
};

struct GDWaveObjectBuilder {
  typedef GDWaveObject Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_cursorColor1(int32_t cursorColor1) {
    fbb_.AddElement<int32_t>(GDWaveObject::VT_CURSORCOLOR1, cursorColor1, 0);
  }
  void add_cursorColor2(int32_t cursorColor2) {
    fbb_.AddElement<int32_t>(GDWaveObject::VT_CURSORCOLOR2, cursorColor2, 0);
  }
  void add_cursorID(int32_t cursorID) {
    fbb_.AddElement<int32_t>(GDWaveObject::VT_CURSORID, cursorID, 0);
  }
  void add_cursorHasGlow(bool cursorHasGlow) {
    fbb_.AddElement<uint8_t>(GDWaveObject::VT_CURSORHASGLOW, static_cast<uint8_t>(cursorHasGlow), 0);
  }
  void add_cursorGlowColor(int32_t cursorGlowColor) {
    fbb_.AddElement<int32_t>(GDWaveObject::VT_CURSORGLOWCOLOR, cursorGlowColor, 0);
  }
  explicit GDWaveObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GDWaveObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GDWaveObject>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GDWaveObject> CreateGDWaveObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t cursorColor1 = 0,
    int32_t cursorColor2 = 0,
    int32_t cursorID = 0,
    bool cursorHasGlow = false,
    int32_t cursorGlowColor = 0) {
  GDWaveObjectBuilder builder_(_fbb);
  builder_.add_cursorGlowColor(cursorGlowColor);
  builder_.add_cursorID(cursorID);
  builder_.add_cursorColor2(cursorColor2);
  builder_.add_cursorColor1(cursorColor1);
  builder_.add_cursorHasGlow(cursorHasGlow);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *SpeedTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::SpeedTypeTable
  };
  static const char * const names[] = {
    "Normal",
    "Slow",
    "Fast",
    "Faster",
    "Fastest"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *UndoCommandTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::UndoCommandTypeTable
  };
  static const int64_t values[] = { 1, 2, 3, 4, 5, 6 };
  static const char * const names[] = {
    "Delete",
    "New",
    "Paste",
    "DeleteMulti",
    "Transform",
    "Select"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 6, type_codes, type_refs, nullptr, values, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ArtTypeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::ArtTypeTypeTable
  };
  static const char * const names[] = {
    "Background",
    "Ground",
    "Middleground"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *SongSelectTypeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::SongSelectTypeTypeTable
  };
  static const char * const names[] = {
    "Default",
    "Custom"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *EditCommandTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::EditCommandTypeTable
  };
  static const int64_t values[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
  static const char * const names[] = {
    "SmallLeft",
    "SmallRight",
    "SmallUp",
    "SmallDown",
    "Left",
    "Right",
    "Up",
    "Down",
    "BigLeft",
    "BigRight",
    "BigUp",
    "BigDown",
    "TinyLeft",
    "TinyRight",
    "TinyUp",
    "TinyDown",
    "HalfLeft",
    "HalfRight",
    "HalfUp",
    "HalfDown",
    "FlipX",
    "FlipY",
    "RotateCW",
    "RotateCCW",
    "RotateCW45",
    "RotateCCW45",
    "RotateFree",
    "RotateSnap",
    "Scale",
    "ScaleXY",
    "Skew"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 31, type_codes, type_refs, nullptr, values, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *SettingOptionTypeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::SettingOptionTypeTypeTable
  };
  static const int64_t values[] = { 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22 };
  static const char * const names[] = {
    "StartMini",
    "StartDual",
    "TwoPlayerMode",
    "MirrorMode",
    "IsFlipped",
    "RotateGameplay",
    "ReverseGameplay",
    "AllowMultiRotation",
    "EnablePlayerSqueeze",
    "FixGravityBug",
    "FixNegativeScale",
    "FixRobotJump",
    "SpawnGroup",
    "DynamicLevelheight",
    "SortGroups",
    "FixRadiusCollision",
    "Enable22Changes",
    "AllowStaticRotate",
    "ReverseSync",
    "NoTimePenalty",
    "propkA45"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 21, type_codes, type_refs, nullptr, values, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GDGameObjectMinTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::CCPosITypeTable,
    CTSerialize::ObjectFlipTypeTable,
    CTSerialize::NodeScaleTypeTable
  };
  static const char * const names[] = {
    "uniqueID",
    "objID",
    "pos",
    "rotation",
    "isHighDetail",
    "noGlow",
    "noEnter",
    "flip",
    "scale"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 9, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GDWaveObjectTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 }
  };
  static const char * const names[] = {
    "cursorColor1",
    "cursorColor2",
    "cursorID",
    "cursorHasGlow",
    "cursorGlowColor"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace CTSerialize

#endif  // FLATBUFFERS_GENERATED_GDSERIALIZATION_CTSERIALIZE_H_
