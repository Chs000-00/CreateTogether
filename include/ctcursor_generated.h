// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTCURSOR_CTSERIALIZE_CURSOR_H_
#define FLATBUFFERS_GENERATED_CTCURSOR_CTSERIALIZE_CURSOR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "ccserialization_generated.h"

namespace CTSerialize {
namespace cursor {

struct CursorUpdate;
struct CursorUpdateBuilder;

inline const ::flatbuffers::TypeTable *CursorUpdateTypeTable();

enum StatusType : int8_t {
  StatusType_None = 0,
  StatusType_EditingTrigger = 1,
  StatusType_EditingLevelSettings = 2,
  StatusType_LevelEditorPaused = 3,
  StatusType_MIN = StatusType_None,
  StatusType_MAX = StatusType_LevelEditorPaused
};

inline const StatusType (&EnumValuesStatusType())[4] {
  static const StatusType values[] = {
    StatusType_None,
    StatusType_EditingTrigger,
    StatusType_EditingLevelSettings,
    StatusType_LevelEditorPaused
  };
  return values;
}

inline const char * const *EnumNamesStatusType() {
  static const char * const names[5] = {
    "None",
    "EditingTrigger",
    "EditingLevelSettings",
    "LevelEditorPaused",
    nullptr
  };
  return names;
}

inline const char *EnumNameStatusType(StatusType e) {
  if (::flatbuffers::IsOutRange(e, StatusType_None, StatusType_LevelEditorPaused)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStatusType()[index];
}

struct CursorUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CursorUpdateBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CursorUpdateTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_STATUS = 6
  };
  const CTSerialize::CCPos *position() const {
    return GetStruct<const CTSerialize::CCPos *>(VT_POSITION);
  }
  CTSerialize::cursor::StatusType status() const {
    return static_cast<CTSerialize::cursor::StatusType>(GetField<int8_t>(VT_STATUS, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<CTSerialize::CCPos>(verifier, VT_POSITION, 4) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           verifier.EndTable();
  }
};

struct CursorUpdateBuilder {
  typedef CursorUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const CTSerialize::CCPos *position) {
    fbb_.AddStruct(CursorUpdate::VT_POSITION, position);
  }
  void add_status(CTSerialize::cursor::StatusType status) {
    fbb_.AddElement<int8_t>(CursorUpdate::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  explicit CursorUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CursorUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CursorUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CursorUpdate> CreateCursorUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const CTSerialize::CCPos *position = nullptr,
    CTSerialize::cursor::StatusType status = CTSerialize::cursor::StatusType_None) {
  CursorUpdateBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_status(status);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *StatusTypeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::cursor::StatusTypeTypeTable
  };
  static const char * const names[] = {
    "None",
    "EditingTrigger",
    "EditingLevelSettings",
    "LevelEditorPaused"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *CursorUpdateTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::CCPosTypeTable,
    CTSerialize::cursor::StatusTypeTypeTable
  };
  static const char * const names[] = {
    "position",
    "status"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const CTSerialize::cursor::CursorUpdate *GetCursorUpdate(const void *buf) {
  return ::flatbuffers::GetRoot<CTSerialize::cursor::CursorUpdate>(buf);
}

inline const CTSerialize::cursor::CursorUpdate *GetSizePrefixedCursorUpdate(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CTSerialize::cursor::CursorUpdate>(buf);
}

inline bool VerifyCursorUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CTSerialize::cursor::CursorUpdate>(nullptr);
}

inline bool VerifySizePrefixedCursorUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CTSerialize::cursor::CursorUpdate>(nullptr);
}

inline void FinishCursorUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CTSerialize::cursor::CursorUpdate> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCursorUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CTSerialize::cursor::CursorUpdate> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cursor
}  // namespace CTSerialize

#endif  // FLATBUFFERS_GENERATED_CTCURSOR_CTSERIALIZE_CURSOR_H_
