// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CTSERIALIZE_CTSERIALIZE_H_
#define FLATBUFFERS_GENERATED_CTSERIALIZE_CTSERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "ccserialization_generated.h"
#include "gdserialization_generated.h"

namespace CTSerialize {

struct MessageHeader;
struct MessageHeaderBuilder;

struct CreateObjects;
struct CreateObjectsBuilder;

struct DeleteObjects;
struct DeleteObjectsBuilder;

struct MoveObjects;
struct MoveObjectsBuilder;

struct LevelSettingChange;
struct LevelSettingChangeBuilder;

struct RotateObjects;
struct RotateObjectsBuilder;

struct PasteObjects;
struct PasteObjectsBuilder;

struct ModifyObjects;
struct ModifyObjectsBuilder;

struct ChangeGroupID;
struct ChangeGroupIDBuilder;

struct ChangeDefaultColor;
struct ChangeDefaultColorBuilder;

struct RequestLevel;
struct RequestLevelBuilder;

struct ReturnLevelString;
struct ReturnLevelStringBuilder;

struct UpdateFont;
struct UpdateFontBuilder;

struct UpdateSong;
struct UpdateSongBuilder;

struct ChangeArt;
struct ChangeArtBuilder;

struct SpeedChange;
struct SpeedChangeBuilder;

struct GameModeChange;
struct GameModeChangeBuilder;

struct AdminAction;
struct AdminActionBuilder;

struct GlobedHandshake;
struct GlobedHandshakeBuilder;

inline const ::flatbuffers::TypeTable *MessageHeaderTypeTable();

inline const ::flatbuffers::TypeTable *CreateObjectsTypeTable();

inline const ::flatbuffers::TypeTable *DeleteObjectsTypeTable();

inline const ::flatbuffers::TypeTable *MoveObjectsTypeTable();

inline const ::flatbuffers::TypeTable *LevelSettingChangeTypeTable();

inline const ::flatbuffers::TypeTable *RotateObjectsTypeTable();

inline const ::flatbuffers::TypeTable *PasteObjectsTypeTable();

inline const ::flatbuffers::TypeTable *ModifyObjectsTypeTable();

inline const ::flatbuffers::TypeTable *ChangeGroupIDTypeTable();

inline const ::flatbuffers::TypeTable *ChangeDefaultColorTypeTable();

inline const ::flatbuffers::TypeTable *RequestLevelTypeTable();

inline const ::flatbuffers::TypeTable *ReturnLevelStringTypeTable();

inline const ::flatbuffers::TypeTable *UpdateFontTypeTable();

inline const ::flatbuffers::TypeTable *UpdateSongTypeTable();

inline const ::flatbuffers::TypeTable *ChangeArtTypeTable();

inline const ::flatbuffers::TypeTable *SpeedChangeTypeTable();

inline const ::flatbuffers::TypeTable *GameModeChangeTypeTable();

inline const ::flatbuffers::TypeTable *AdminActionTypeTable();

inline const ::flatbuffers::TypeTable *GlobedHandshakeTypeTable();

enum MessageBody : uint8_t {
  MessageBody_NONE = 0,
  MessageBody_CreateObjects = 1,
  MessageBody_DeleteObjects = 2,
  MessageBody_MoveObjects = 3,
  MessageBody_LevelSettingChange = 4,
  MessageBody_RotateObjects = 5,
  MessageBody_PasteObjects = 6,
  MessageBody_ModifyObjects = 7,
  MessageBody_ChangeGroupID = 8,
  MessageBody_ChangeDefaultColor = 9,
  MessageBody_RequestLevel = 10,
  MessageBody_ReturnLevelString = 11,
  MessageBody_UpdateFont = 12,
  MessageBody_UpdateSong = 13,
  MessageBody_ChangeArt = 14,
  MessageBody_SpeedChange = 15,
  MessageBody_GameModeChange = 16,
  MessageBody_AdminAction = 17,
  MessageBody_GlobedHandshake = 18,
  MessageBody_MIN = MessageBody_NONE,
  MessageBody_MAX = MessageBody_GlobedHandshake
};

inline const MessageBody (&EnumValuesMessageBody())[19] {
  static const MessageBody values[] = {
    MessageBody_NONE,
    MessageBody_CreateObjects,
    MessageBody_DeleteObjects,
    MessageBody_MoveObjects,
    MessageBody_LevelSettingChange,
    MessageBody_RotateObjects,
    MessageBody_PasteObjects,
    MessageBody_ModifyObjects,
    MessageBody_ChangeGroupID,
    MessageBody_ChangeDefaultColor,
    MessageBody_RequestLevel,
    MessageBody_ReturnLevelString,
    MessageBody_UpdateFont,
    MessageBody_UpdateSong,
    MessageBody_ChangeArt,
    MessageBody_SpeedChange,
    MessageBody_GameModeChange,
    MessageBody_AdminAction,
    MessageBody_GlobedHandshake
  };
  return values;
}

inline const char * const *EnumNamesMessageBody() {
  static const char * const names[20] = {
    "NONE",
    "CreateObjects",
    "DeleteObjects",
    "MoveObjects",
    "LevelSettingChange",
    "RotateObjects",
    "PasteObjects",
    "ModifyObjects",
    "ChangeGroupID",
    "ChangeDefaultColor",
    "RequestLevel",
    "ReturnLevelString",
    "UpdateFont",
    "UpdateSong",
    "ChangeArt",
    "SpeedChange",
    "GameModeChange",
    "AdminAction",
    "GlobedHandshake",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageBody(MessageBody e) {
  if (::flatbuffers::IsOutRange(e, MessageBody_NONE, MessageBody_GlobedHandshake)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageBody()[index];
}

template<typename T> struct MessageBodyTraits {
  static const MessageBody enum_value = MessageBody_NONE;
};

template<> struct MessageBodyTraits<CTSerialize::CreateObjects> {
  static const MessageBody enum_value = MessageBody_CreateObjects;
};

template<> struct MessageBodyTraits<CTSerialize::DeleteObjects> {
  static const MessageBody enum_value = MessageBody_DeleteObjects;
};

template<> struct MessageBodyTraits<CTSerialize::MoveObjects> {
  static const MessageBody enum_value = MessageBody_MoveObjects;
};

template<> struct MessageBodyTraits<CTSerialize::LevelSettingChange> {
  static const MessageBody enum_value = MessageBody_LevelSettingChange;
};

template<> struct MessageBodyTraits<CTSerialize::RotateObjects> {
  static const MessageBody enum_value = MessageBody_RotateObjects;
};

template<> struct MessageBodyTraits<CTSerialize::PasteObjects> {
  static const MessageBody enum_value = MessageBody_PasteObjects;
};

template<> struct MessageBodyTraits<CTSerialize::ModifyObjects> {
  static const MessageBody enum_value = MessageBody_ModifyObjects;
};

template<> struct MessageBodyTraits<CTSerialize::ChangeGroupID> {
  static const MessageBody enum_value = MessageBody_ChangeGroupID;
};

template<> struct MessageBodyTraits<CTSerialize::ChangeDefaultColor> {
  static const MessageBody enum_value = MessageBody_ChangeDefaultColor;
};

template<> struct MessageBodyTraits<CTSerialize::RequestLevel> {
  static const MessageBody enum_value = MessageBody_RequestLevel;
};

template<> struct MessageBodyTraits<CTSerialize::ReturnLevelString> {
  static const MessageBody enum_value = MessageBody_ReturnLevelString;
};

template<> struct MessageBodyTraits<CTSerialize::UpdateFont> {
  static const MessageBody enum_value = MessageBody_UpdateFont;
};

template<> struct MessageBodyTraits<CTSerialize::UpdateSong> {
  static const MessageBody enum_value = MessageBody_UpdateSong;
};

template<> struct MessageBodyTraits<CTSerialize::ChangeArt> {
  static const MessageBody enum_value = MessageBody_ChangeArt;
};

template<> struct MessageBodyTraits<CTSerialize::SpeedChange> {
  static const MessageBody enum_value = MessageBody_SpeedChange;
};

template<> struct MessageBodyTraits<CTSerialize::GameModeChange> {
  static const MessageBody enum_value = MessageBody_GameModeChange;
};

template<> struct MessageBodyTraits<CTSerialize::AdminAction> {
  static const MessageBody enum_value = MessageBody_AdminAction;
};

template<> struct MessageBodyTraits<CTSerialize::GlobedHandshake> {
  static const MessageBody enum_value = MessageBody_GlobedHandshake;
};

bool VerifyMessageBody(::flatbuffers::Verifier &verifier, const void *obj, MessageBody type);
bool VerifyMessageBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

enum AdminActions : int8_t {
  AdminActions_Invalid = 0,
  AdminActions_SteamUserIDBan = 1,
  AdminActions_DisableInteraction = 2,
  AdminActions_Kick = 3,
  AdminActions_MIN = AdminActions_Invalid,
  AdminActions_MAX = AdminActions_Kick
};

inline const AdminActions (&EnumValuesAdminActions())[4] {
  static const AdminActions values[] = {
    AdminActions_Invalid,
    AdminActions_SteamUserIDBan,
    AdminActions_DisableInteraction,
    AdminActions_Kick
  };
  return values;
}

inline const char * const *EnumNamesAdminActions() {
  static const char * const names[5] = {
    "Invalid",
    "SteamUserIDBan",
    "DisableInteraction",
    "Kick",
    nullptr
  };
  return names;
}

inline const char *EnumNameAdminActions(AdminActions e) {
  if (::flatbuffers::IsOutRange(e, AdminActions_Invalid, AdminActions_Kick)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAdminActions()[index];
}

struct MessageHeader FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageHeaderBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MessageHeaderTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BODY_TYPE = 4,
    VT_BODY = 6
  };
  CTSerialize::MessageBody body_type() const {
    return static_cast<CTSerialize::MessageBody>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const CTSerialize::CreateObjects *body_as_CreateObjects() const {
    return body_type() == CTSerialize::MessageBody_CreateObjects ? static_cast<const CTSerialize::CreateObjects *>(body()) : nullptr;
  }
  const CTSerialize::DeleteObjects *body_as_DeleteObjects() const {
    return body_type() == CTSerialize::MessageBody_DeleteObjects ? static_cast<const CTSerialize::DeleteObjects *>(body()) : nullptr;
  }
  const CTSerialize::MoveObjects *body_as_MoveObjects() const {
    return body_type() == CTSerialize::MessageBody_MoveObjects ? static_cast<const CTSerialize::MoveObjects *>(body()) : nullptr;
  }
  const CTSerialize::LevelSettingChange *body_as_LevelSettingChange() const {
    return body_type() == CTSerialize::MessageBody_LevelSettingChange ? static_cast<const CTSerialize::LevelSettingChange *>(body()) : nullptr;
  }
  const CTSerialize::RotateObjects *body_as_RotateObjects() const {
    return body_type() == CTSerialize::MessageBody_RotateObjects ? static_cast<const CTSerialize::RotateObjects *>(body()) : nullptr;
  }
  const CTSerialize::PasteObjects *body_as_PasteObjects() const {
    return body_type() == CTSerialize::MessageBody_PasteObjects ? static_cast<const CTSerialize::PasteObjects *>(body()) : nullptr;
  }
  const CTSerialize::ModifyObjects *body_as_ModifyObjects() const {
    return body_type() == CTSerialize::MessageBody_ModifyObjects ? static_cast<const CTSerialize::ModifyObjects *>(body()) : nullptr;
  }
  const CTSerialize::ChangeGroupID *body_as_ChangeGroupID() const {
    return body_type() == CTSerialize::MessageBody_ChangeGroupID ? static_cast<const CTSerialize::ChangeGroupID *>(body()) : nullptr;
  }
  const CTSerialize::ChangeDefaultColor *body_as_ChangeDefaultColor() const {
    return body_type() == CTSerialize::MessageBody_ChangeDefaultColor ? static_cast<const CTSerialize::ChangeDefaultColor *>(body()) : nullptr;
  }
  const CTSerialize::RequestLevel *body_as_RequestLevel() const {
    return body_type() == CTSerialize::MessageBody_RequestLevel ? static_cast<const CTSerialize::RequestLevel *>(body()) : nullptr;
  }
  const CTSerialize::ReturnLevelString *body_as_ReturnLevelString() const {
    return body_type() == CTSerialize::MessageBody_ReturnLevelString ? static_cast<const CTSerialize::ReturnLevelString *>(body()) : nullptr;
  }
  const CTSerialize::UpdateFont *body_as_UpdateFont() const {
    return body_type() == CTSerialize::MessageBody_UpdateFont ? static_cast<const CTSerialize::UpdateFont *>(body()) : nullptr;
  }
  const CTSerialize::UpdateSong *body_as_UpdateSong() const {
    return body_type() == CTSerialize::MessageBody_UpdateSong ? static_cast<const CTSerialize::UpdateSong *>(body()) : nullptr;
  }
  const CTSerialize::ChangeArt *body_as_ChangeArt() const {
    return body_type() == CTSerialize::MessageBody_ChangeArt ? static_cast<const CTSerialize::ChangeArt *>(body()) : nullptr;
  }
  const CTSerialize::SpeedChange *body_as_SpeedChange() const {
    return body_type() == CTSerialize::MessageBody_SpeedChange ? static_cast<const CTSerialize::SpeedChange *>(body()) : nullptr;
  }
  const CTSerialize::GameModeChange *body_as_GameModeChange() const {
    return body_type() == CTSerialize::MessageBody_GameModeChange ? static_cast<const CTSerialize::GameModeChange *>(body()) : nullptr;
  }
  const CTSerialize::AdminAction *body_as_AdminAction() const {
    return body_type() == CTSerialize::MessageBody_AdminAction ? static_cast<const CTSerialize::AdminAction *>(body()) : nullptr;
  }
  const CTSerialize::GlobedHandshake *body_as_GlobedHandshake() const {
    return body_type() == CTSerialize::MessageBody_GlobedHandshake ? static_cast<const CTSerialize::GlobedHandshake *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyMessageBody(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const CTSerialize::CreateObjects *MessageHeader::body_as<CTSerialize::CreateObjects>() const {
  return body_as_CreateObjects();
}

template<> inline const CTSerialize::DeleteObjects *MessageHeader::body_as<CTSerialize::DeleteObjects>() const {
  return body_as_DeleteObjects();
}

template<> inline const CTSerialize::MoveObjects *MessageHeader::body_as<CTSerialize::MoveObjects>() const {
  return body_as_MoveObjects();
}

template<> inline const CTSerialize::LevelSettingChange *MessageHeader::body_as<CTSerialize::LevelSettingChange>() const {
  return body_as_LevelSettingChange();
}

template<> inline const CTSerialize::RotateObjects *MessageHeader::body_as<CTSerialize::RotateObjects>() const {
  return body_as_RotateObjects();
}

template<> inline const CTSerialize::PasteObjects *MessageHeader::body_as<CTSerialize::PasteObjects>() const {
  return body_as_PasteObjects();
}

template<> inline const CTSerialize::ModifyObjects *MessageHeader::body_as<CTSerialize::ModifyObjects>() const {
  return body_as_ModifyObjects();
}

template<> inline const CTSerialize::ChangeGroupID *MessageHeader::body_as<CTSerialize::ChangeGroupID>() const {
  return body_as_ChangeGroupID();
}

template<> inline const CTSerialize::ChangeDefaultColor *MessageHeader::body_as<CTSerialize::ChangeDefaultColor>() const {
  return body_as_ChangeDefaultColor();
}

template<> inline const CTSerialize::RequestLevel *MessageHeader::body_as<CTSerialize::RequestLevel>() const {
  return body_as_RequestLevel();
}

template<> inline const CTSerialize::ReturnLevelString *MessageHeader::body_as<CTSerialize::ReturnLevelString>() const {
  return body_as_ReturnLevelString();
}

template<> inline const CTSerialize::UpdateFont *MessageHeader::body_as<CTSerialize::UpdateFont>() const {
  return body_as_UpdateFont();
}

template<> inline const CTSerialize::UpdateSong *MessageHeader::body_as<CTSerialize::UpdateSong>() const {
  return body_as_UpdateSong();
}

template<> inline const CTSerialize::ChangeArt *MessageHeader::body_as<CTSerialize::ChangeArt>() const {
  return body_as_ChangeArt();
}

template<> inline const CTSerialize::SpeedChange *MessageHeader::body_as<CTSerialize::SpeedChange>() const {
  return body_as_SpeedChange();
}

template<> inline const CTSerialize::GameModeChange *MessageHeader::body_as<CTSerialize::GameModeChange>() const {
  return body_as_GameModeChange();
}

template<> inline const CTSerialize::AdminAction *MessageHeader::body_as<CTSerialize::AdminAction>() const {
  return body_as_AdminAction();
}

template<> inline const CTSerialize::GlobedHandshake *MessageHeader::body_as<CTSerialize::GlobedHandshake>() const {
  return body_as_GlobedHandshake();
}

struct MessageHeaderBuilder {
  typedef MessageHeader Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_body_type(CTSerialize::MessageBody body_type) {
    fbb_.AddElement<uint8_t>(MessageHeader::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(MessageHeader::VT_BODY, body);
  }
  explicit MessageHeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MessageHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MessageHeader>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MessageHeader> CreateMessageHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CTSerialize::MessageBody body_type = CTSerialize::MessageBody_NONE,
    ::flatbuffers::Offset<void> body = 0) {
  MessageHeaderBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_body_type(body_type);
  return builder_.Finish();
}

struct CreateObjects FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CreateObjectsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CreateObjectsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ = 4
  };
  const CTSerialize::GDGameObjectMin *obj() const {
    return GetPointer<const CTSerialize::GDGameObjectMin *>(VT_OBJ);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJ) &&
           verifier.VerifyTable(obj()) &&
           verifier.EndTable();
  }
};

struct CreateObjectsBuilder {
  typedef CreateObjects Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obj(::flatbuffers::Offset<CTSerialize::GDGameObjectMin> obj) {
    fbb_.AddOffset(CreateObjects::VT_OBJ, obj);
  }
  explicit CreateObjectsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CreateObjects> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CreateObjects>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CreateObjects> CreateCreateObjects(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<CTSerialize::GDGameObjectMin> obj = 0) {
  CreateObjectsBuilder builder_(_fbb);
  builder_.add_obj(obj);
  return builder_.Finish();
}

struct DeleteObjects FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DeleteObjectsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DeleteObjectsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIQUEIDLIST = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UNIQUEIDLIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNIQUEIDLIST) &&
           verifier.VerifyVector(uniqueIDList()) &&
           verifier.VerifyVectorOfStrings(uniqueIDList()) &&
           verifier.EndTable();
  }
};

struct DeleteObjectsBuilder {
  typedef DeleteObjects Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uniqueIDList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList) {
    fbb_.AddOffset(DeleteObjects::VT_UNIQUEIDLIST, uniqueIDList);
  }
  explicit DeleteObjectsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DeleteObjects> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DeleteObjects>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DeleteObjects> CreateDeleteObjects(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList = 0) {
  DeleteObjectsBuilder builder_(_fbb);
  builder_.add_uniqueIDList(uniqueIDList);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DeleteObjects> CreateDeleteObjectsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList = nullptr) {
  auto uniqueIDList__ = uniqueIDList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*uniqueIDList) : 0;
  return CTSerialize::CreateDeleteObjects(
      _fbb,
      uniqueIDList__);
}

struct MoveObjects FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MoveObjectsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MoveObjectsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIQUEID = 4,
    VT_POSITIONOFFSET = 6
  };
  const ::flatbuffers::String *uniqueID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNIQUEID);
  }
  const CTSerialize::CCPos *positionOffset() const {
    return GetStruct<const CTSerialize::CCPos *>(VT_POSITIONOFFSET);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNIQUEID) &&
           verifier.VerifyString(uniqueID()) &&
           VerifyField<CTSerialize::CCPos>(verifier, VT_POSITIONOFFSET, 4) &&
           verifier.EndTable();
  }
};

struct MoveObjectsBuilder {
  typedef MoveObjects Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uniqueID(::flatbuffers::Offset<::flatbuffers::String> uniqueID) {
    fbb_.AddOffset(MoveObjects::VT_UNIQUEID, uniqueID);
  }
  void add_positionOffset(const CTSerialize::CCPos *positionOffset) {
    fbb_.AddStruct(MoveObjects::VT_POSITIONOFFSET, positionOffset);
  }
  explicit MoveObjectsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MoveObjects> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MoveObjects>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MoveObjects> CreateMoveObjects(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> uniqueID = 0,
    const CTSerialize::CCPos *positionOffset = nullptr) {
  MoveObjectsBuilder builder_(_fbb);
  builder_.add_positionOffset(positionOffset);
  builder_.add_uniqueID(uniqueID);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MoveObjects> CreateMoveObjectsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *uniqueID = nullptr,
    const CTSerialize::CCPos *positionOffset = nullptr) {
  auto uniqueID__ = uniqueID ? _fbb.CreateString(uniqueID) : 0;
  return CTSerialize::CreateMoveObjects(
      _fbb,
      uniqueID__,
      positionOffset);
}

struct LevelSettingChange FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LevelSettingChangeBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return LevelSettingChangeTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SETTINGID = 4,
    VT_SPAWNGROUP = 6
  };
  uint16_t settingID() const {
    return GetField<uint16_t>(VT_SETTINGID, 0);
  }
  ::flatbuffers::Optional<int32_t> spawnGroup() const {
    return GetOptional<int32_t, int32_t>(VT_SPAWNGROUP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_SETTINGID, 2) &&
           VerifyField<int32_t>(verifier, VT_SPAWNGROUP, 4) &&
           verifier.EndTable();
  }
};

struct LevelSettingChangeBuilder {
  typedef LevelSettingChange Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_settingID(uint16_t settingID) {
    fbb_.AddElement<uint16_t>(LevelSettingChange::VT_SETTINGID, settingID, 0);
  }
  void add_spawnGroup(int32_t spawnGroup) {
    fbb_.AddElement<int32_t>(LevelSettingChange::VT_SPAWNGROUP, spawnGroup);
  }
  explicit LevelSettingChangeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LevelSettingChange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LevelSettingChange>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LevelSettingChange> CreateLevelSettingChange(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t settingID = 0,
    ::flatbuffers::Optional<int32_t> spawnGroup = ::flatbuffers::nullopt) {
  LevelSettingChangeBuilder builder_(_fbb);
  if(spawnGroup) { builder_.add_spawnGroup(*spawnGroup); }
  builder_.add_settingID(settingID);
  return builder_.Finish();
}

struct RotateObjects FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RotateObjectsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RotateObjectsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROTATION = 4,
    VT_ANCHOR = 6,
    VT_UNIQUEIDLIST = 8
  };
  float rotation() const {
    return GetField<float>(VT_ROTATION, 0.0f);
  }
  const CTSerialize::CCPos *anchor() const {
    return GetStruct<const CTSerialize::CCPos *>(VT_ANCHOR);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UNIQUEIDLIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_ROTATION, 4) &&
           VerifyField<CTSerialize::CCPos>(verifier, VT_ANCHOR, 4) &&
           VerifyOffset(verifier, VT_UNIQUEIDLIST) &&
           verifier.VerifyVector(uniqueIDList()) &&
           verifier.VerifyVectorOfStrings(uniqueIDList()) &&
           verifier.EndTable();
  }
};

struct RotateObjectsBuilder {
  typedef RotateObjects Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_rotation(float rotation) {
    fbb_.AddElement<float>(RotateObjects::VT_ROTATION, rotation, 0.0f);
  }
  void add_anchor(const CTSerialize::CCPos *anchor) {
    fbb_.AddStruct(RotateObjects::VT_ANCHOR, anchor);
  }
  void add_uniqueIDList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList) {
    fbb_.AddOffset(RotateObjects::VT_UNIQUEIDLIST, uniqueIDList);
  }
  explicit RotateObjectsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RotateObjects> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RotateObjects>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RotateObjects> CreateRotateObjects(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float rotation = 0.0f,
    const CTSerialize::CCPos *anchor = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList = 0) {
  RotateObjectsBuilder builder_(_fbb);
  builder_.add_uniqueIDList(uniqueIDList);
  builder_.add_anchor(anchor);
  builder_.add_rotation(rotation);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RotateObjects> CreateRotateObjectsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float rotation = 0.0f,
    const CTSerialize::CCPos *anchor = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList = nullptr) {
  auto uniqueIDList__ = uniqueIDList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*uniqueIDList) : 0;
  return CTSerialize::CreateRotateObjects(
      _fbb,
      rotation,
      anchor,
      uniqueIDList__);
}

struct PasteObjects FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PasteObjectsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PasteObjectsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIQUEIDLIST = 4,
    VT_PASTEDSTRING = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UNIQUEIDLIST);
  }
  const ::flatbuffers::String *pastedString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASTEDSTRING);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNIQUEIDLIST) &&
           verifier.VerifyVector(uniqueIDList()) &&
           verifier.VerifyVectorOfStrings(uniqueIDList()) &&
           VerifyOffset(verifier, VT_PASTEDSTRING) &&
           verifier.VerifyString(pastedString()) &&
           verifier.EndTable();
  }
};

struct PasteObjectsBuilder {
  typedef PasteObjects Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uniqueIDList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList) {
    fbb_.AddOffset(PasteObjects::VT_UNIQUEIDLIST, uniqueIDList);
  }
  void add_pastedString(::flatbuffers::Offset<::flatbuffers::String> pastedString) {
    fbb_.AddOffset(PasteObjects::VT_PASTEDSTRING, pastedString);
  }
  explicit PasteObjectsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PasteObjects> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PasteObjects>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PasteObjects> CreatePasteObjects(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pastedString = 0) {
  PasteObjectsBuilder builder_(_fbb);
  builder_.add_pastedString(pastedString);
  builder_.add_uniqueIDList(uniqueIDList);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PasteObjects> CreatePasteObjectsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList = nullptr,
    const char *pastedString = nullptr) {
  auto uniqueIDList__ = uniqueIDList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*uniqueIDList) : 0;
  auto pastedString__ = pastedString ? _fbb.CreateString(pastedString) : 0;
  return CTSerialize::CreatePasteObjects(
      _fbb,
      uniqueIDList__,
      pastedString__);
}

struct ModifyObjects FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ModifyObjectsBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ModifyObjectsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIQUEIDLIST = 4,
    VT_PASTEDSTRING = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UNIQUEIDLIST);
  }
  const ::flatbuffers::String *pastedString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASTEDSTRING);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNIQUEIDLIST) &&
           verifier.VerifyVector(uniqueIDList()) &&
           verifier.VerifyVectorOfStrings(uniqueIDList()) &&
           VerifyOffset(verifier, VT_PASTEDSTRING) &&
           verifier.VerifyString(pastedString()) &&
           verifier.EndTable();
  }
};

struct ModifyObjectsBuilder {
  typedef ModifyObjects Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uniqueIDList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList) {
    fbb_.AddOffset(ModifyObjects::VT_UNIQUEIDLIST, uniqueIDList);
  }
  void add_pastedString(::flatbuffers::Offset<::flatbuffers::String> pastedString) {
    fbb_.AddOffset(ModifyObjects::VT_PASTEDSTRING, pastedString);
  }
  explicit ModifyObjectsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ModifyObjects> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ModifyObjects>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ModifyObjects> CreateModifyObjects(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pastedString = 0) {
  ModifyObjectsBuilder builder_(_fbb);
  builder_.add_pastedString(pastedString);
  builder_.add_uniqueIDList(uniqueIDList);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ModifyObjects> CreateModifyObjectsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList = nullptr,
    const char *pastedString = nullptr) {
  auto uniqueIDList__ = uniqueIDList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*uniqueIDList) : 0;
  auto pastedString__ = pastedString ? _fbb.CreateString(pastedString) : 0;
  return CTSerialize::CreateModifyObjects(
      _fbb,
      uniqueIDList__,
      pastedString__);
}

struct ChangeGroupID FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChangeGroupIDBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ChangeGroupIDTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUPID = 4,
    VT_ISADDING = 6,
    VT_UNIQUEIDLIST = 8
  };
  uint32_t groupID() const {
    return GetField<uint32_t>(VT_GROUPID, 0);
  }
  bool isAdding() const {
    return GetField<uint8_t>(VT_ISADDING, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UNIQUEIDLIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_GROUPID, 4) &&
           VerifyField<uint8_t>(verifier, VT_ISADDING, 1) &&
           VerifyOffset(verifier, VT_UNIQUEIDLIST) &&
           verifier.VerifyVector(uniqueIDList()) &&
           verifier.VerifyVectorOfStrings(uniqueIDList()) &&
           verifier.EndTable();
  }
};

struct ChangeGroupIDBuilder {
  typedef ChangeGroupID Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_groupID(uint32_t groupID) {
    fbb_.AddElement<uint32_t>(ChangeGroupID::VT_GROUPID, groupID, 0);
  }
  void add_isAdding(bool isAdding) {
    fbb_.AddElement<uint8_t>(ChangeGroupID::VT_ISADDING, static_cast<uint8_t>(isAdding), 0);
  }
  void add_uniqueIDList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList) {
    fbb_.AddOffset(ChangeGroupID::VT_UNIQUEIDLIST, uniqueIDList);
  }
  explicit ChangeGroupIDBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ChangeGroupID> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ChangeGroupID>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ChangeGroupID> CreateChangeGroupID(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t groupID = 0,
    bool isAdding = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList = 0) {
  ChangeGroupIDBuilder builder_(_fbb);
  builder_.add_uniqueIDList(uniqueIDList);
  builder_.add_groupID(groupID);
  builder_.add_isAdding(isAdding);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ChangeGroupID> CreateChangeGroupIDDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t groupID = 0,
    bool isAdding = false,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList = nullptr) {
  auto uniqueIDList__ = uniqueIDList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*uniqueIDList) : 0;
  return CTSerialize::CreateChangeGroupID(
      _fbb,
      groupID,
      isAdding,
      uniqueIDList__);
}

struct ChangeDefaultColor FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChangeDefaultColorBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ChangeDefaultColorTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUPID = 4,
    VT_CURRENTCOLOR = 6,
    VT_HSV = 8,
    VT_BLENDING = 10,
    VT_OPACITY = 12,
    VT_COPYOPACITY = 14,
    VT_COPYCOLORID = 16
  };
  int32_t groupID() const {
    return GetField<int32_t>(VT_GROUPID, 0);
  }
  const CTSerialize::CCColor3B *currentColor() const {
    return GetStruct<const CTSerialize::CCColor3B *>(VT_CURRENTCOLOR);
  }
  const CTSerialize::CCHsvValue *hsv() const {
    return GetStruct<const CTSerialize::CCHsvValue *>(VT_HSV);
  }
  int32_t blending() const {
    return GetField<int32_t>(VT_BLENDING, 0);
  }
  float opacity() const {
    return GetField<float>(VT_OPACITY, 0.0f);
  }
  bool copyOpacity() const {
    return GetField<uint8_t>(VT_COPYOPACITY, 0) != 0;
  }
  ::flatbuffers::Optional<int32_t> copyColorID() const {
    return GetOptional<int32_t, int32_t>(VT_COPYCOLORID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_GROUPID, 4) &&
           VerifyField<CTSerialize::CCColor3B>(verifier, VT_CURRENTCOLOR, 1) &&
           VerifyField<CTSerialize::CCHsvValue>(verifier, VT_HSV, 4) &&
           VerifyField<int32_t>(verifier, VT_BLENDING, 4) &&
           VerifyField<float>(verifier, VT_OPACITY, 4) &&
           VerifyField<uint8_t>(verifier, VT_COPYOPACITY, 1) &&
           VerifyField<int32_t>(verifier, VT_COPYCOLORID, 4) &&
           verifier.EndTable();
  }
};

struct ChangeDefaultColorBuilder {
  typedef ChangeDefaultColor Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_groupID(int32_t groupID) {
    fbb_.AddElement<int32_t>(ChangeDefaultColor::VT_GROUPID, groupID, 0);
  }
  void add_currentColor(const CTSerialize::CCColor3B *currentColor) {
    fbb_.AddStruct(ChangeDefaultColor::VT_CURRENTCOLOR, currentColor);
  }
  void add_hsv(const CTSerialize::CCHsvValue *hsv) {
    fbb_.AddStruct(ChangeDefaultColor::VT_HSV, hsv);
  }
  void add_blending(int32_t blending) {
    fbb_.AddElement<int32_t>(ChangeDefaultColor::VT_BLENDING, blending, 0);
  }
  void add_opacity(float opacity) {
    fbb_.AddElement<float>(ChangeDefaultColor::VT_OPACITY, opacity, 0.0f);
  }
  void add_copyOpacity(bool copyOpacity) {
    fbb_.AddElement<uint8_t>(ChangeDefaultColor::VT_COPYOPACITY, static_cast<uint8_t>(copyOpacity), 0);
  }
  void add_copyColorID(int32_t copyColorID) {
    fbb_.AddElement<int32_t>(ChangeDefaultColor::VT_COPYCOLORID, copyColorID);
  }
  explicit ChangeDefaultColorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ChangeDefaultColor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ChangeDefaultColor>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ChangeDefaultColor> CreateChangeDefaultColor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t groupID = 0,
    const CTSerialize::CCColor3B *currentColor = nullptr,
    const CTSerialize::CCHsvValue *hsv = nullptr,
    int32_t blending = 0,
    float opacity = 0.0f,
    bool copyOpacity = false,
    ::flatbuffers::Optional<int32_t> copyColorID = ::flatbuffers::nullopt) {
  ChangeDefaultColorBuilder builder_(_fbb);
  if(copyColorID) { builder_.add_copyColorID(*copyColorID); }
  builder_.add_opacity(opacity);
  builder_.add_blending(blending);
  builder_.add_hsv(hsv);
  builder_.add_currentColor(currentColor);
  builder_.add_groupID(groupID);
  builder_.add_copyOpacity(copyOpacity);
  return builder_.Finish();
}

struct RequestLevel FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestLevelBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RequestLevelTypeTable();
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct RequestLevelBuilder {
  typedef RequestLevel Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit RequestLevelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RequestLevel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RequestLevel>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RequestLevel> CreateRequestLevel(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  RequestLevelBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ReturnLevelString FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReturnLevelStringBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ReturnLevelStringTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNIQUEIDLIST = 4,
    VT_LEVELSTRING = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UNIQUEIDLIST);
  }
  const ::flatbuffers::String *levelString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LEVELSTRING);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNIQUEIDLIST) &&
           verifier.VerifyVector(uniqueIDList()) &&
           verifier.VerifyVectorOfStrings(uniqueIDList()) &&
           VerifyOffset(verifier, VT_LEVELSTRING) &&
           verifier.VerifyString(levelString()) &&
           verifier.EndTable();
  }
};

struct ReturnLevelStringBuilder {
  typedef ReturnLevelString Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uniqueIDList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList) {
    fbb_.AddOffset(ReturnLevelString::VT_UNIQUEIDLIST, uniqueIDList);
  }
  void add_levelString(::flatbuffers::Offset<::flatbuffers::String> levelString) {
    fbb_.AddOffset(ReturnLevelString::VT_LEVELSTRING, levelString);
  }
  explicit ReturnLevelStringBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ReturnLevelString> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReturnLevelString>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ReturnLevelString> CreateReturnLevelString(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uniqueIDList = 0,
    ::flatbuffers::Offset<::flatbuffers::String> levelString = 0) {
  ReturnLevelStringBuilder builder_(_fbb);
  builder_.add_levelString(levelString);
  builder_.add_uniqueIDList(uniqueIDList);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ReturnLevelString> CreateReturnLevelStringDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *uniqueIDList = nullptr,
    const char *levelString = nullptr) {
  auto uniqueIDList__ = uniqueIDList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*uniqueIDList) : 0;
  auto levelString__ = levelString ? _fbb.CreateString(levelString) : 0;
  return CTSerialize::CreateReturnLevelString(
      _fbb,
      uniqueIDList__,
      levelString__);
}

struct UpdateFont FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UpdateFontBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return UpdateFontTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FONTID = 4
  };
  uint16_t fontID() const {
    return GetField<uint16_t>(VT_FONTID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_FONTID, 2) &&
           verifier.EndTable();
  }
};

struct UpdateFontBuilder {
  typedef UpdateFont Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_fontID(uint16_t fontID) {
    fbb_.AddElement<uint16_t>(UpdateFont::VT_FONTID, fontID, 0);
  }
  explicit UpdateFontBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UpdateFont> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UpdateFont>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UpdateFont> CreateUpdateFont(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t fontID = 0) {
  UpdateFontBuilder builder_(_fbb);
  builder_.add_fontID(fontID);
  return builder_.Finish();
}

struct UpdateSong FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UpdateSongBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return UpdateSongTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SONGID = 4
  };
  uint64_t songID() const {
    return GetField<uint64_t>(VT_SONGID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SONGID, 8) &&
           verifier.EndTable();
  }
};

struct UpdateSongBuilder {
  typedef UpdateSong Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_songID(uint64_t songID) {
    fbb_.AddElement<uint64_t>(UpdateSong::VT_SONGID, songID, 0);
  }
  explicit UpdateSongBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UpdateSong> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UpdateSong>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UpdateSong> CreateUpdateSong(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t songID = 0) {
  UpdateSongBuilder builder_(_fbb);
  builder_.add_songID(songID);
  return builder_.Finish();
}

struct ChangeArt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChangeArtBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ChangeArtTypeTable();
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ChangeArtBuilder {
  typedef ChangeArt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit ChangeArtBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ChangeArt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ChangeArt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ChangeArt> CreateChangeArt(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  ChangeArtBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SpeedChange FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SpeedChangeBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SpeedChangeTypeTable();
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct SpeedChangeBuilder {
  typedef SpeedChange Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit SpeedChangeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SpeedChange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SpeedChange>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SpeedChange> CreateSpeedChange(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  SpeedChangeBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GameModeChange FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameModeChangeBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GameModeChangeTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GAMEMODE = 4
  };
  uint8_t gameMode() const {
    return GetField<uint8_t>(VT_GAMEMODE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_GAMEMODE, 1) &&
           verifier.EndTable();
  }
};

struct GameModeChangeBuilder {
  typedef GameModeChange Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_gameMode(uint8_t gameMode) {
    fbb_.AddElement<uint8_t>(GameModeChange::VT_GAMEMODE, gameMode, 0);
  }
  explicit GameModeChangeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameModeChange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameModeChange>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameModeChange> CreateGameModeChange(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t gameMode = 0) {
  GameModeChangeBuilder builder_(_fbb);
  builder_.add_gameMode(gameMode);
  return builder_.Finish();
}

struct AdminAction FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AdminActionBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AdminActionTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION = 4,
    VT_USERID = 6,
    VT_TIMEOUTEPOCH = 8,
    VT_REASON = 10
  };
  CTSerialize::AdminActions action() const {
    return static_cast<CTSerialize::AdminActions>(GetField<int8_t>(VT_ACTION, 0));
  }
  uint64_t userId() const {
    return GetField<uint64_t>(VT_USERID, 0);
  }
  uint64_t timeoutEpoch() const {
    return GetField<uint64_t>(VT_TIMEOUTEPOCH, 0);
  }
  const ::flatbuffers::String *reason() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REASON);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_ACTION, 1) &&
           VerifyField<uint64_t>(verifier, VT_USERID, 8) &&
           VerifyField<uint64_t>(verifier, VT_TIMEOUTEPOCH, 8) &&
           VerifyOffset(verifier, VT_REASON) &&
           verifier.VerifyString(reason()) &&
           verifier.EndTable();
  }
};

struct AdminActionBuilder {
  typedef AdminAction Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_action(CTSerialize::AdminActions action) {
    fbb_.AddElement<int8_t>(AdminAction::VT_ACTION, static_cast<int8_t>(action), 0);
  }
  void add_userId(uint64_t userId) {
    fbb_.AddElement<uint64_t>(AdminAction::VT_USERID, userId, 0);
  }
  void add_timeoutEpoch(uint64_t timeoutEpoch) {
    fbb_.AddElement<uint64_t>(AdminAction::VT_TIMEOUTEPOCH, timeoutEpoch, 0);
  }
  void add_reason(::flatbuffers::Offset<::flatbuffers::String> reason) {
    fbb_.AddOffset(AdminAction::VT_REASON, reason);
  }
  explicit AdminActionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AdminAction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AdminAction>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AdminAction> CreateAdminAction(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CTSerialize::AdminActions action = CTSerialize::AdminActions_Invalid,
    uint64_t userId = 0,
    uint64_t timeoutEpoch = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reason = 0) {
  AdminActionBuilder builder_(_fbb);
  builder_.add_timeoutEpoch(timeoutEpoch);
  builder_.add_userId(userId);
  builder_.add_reason(reason);
  builder_.add_action(action);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AdminAction> CreateAdminActionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CTSerialize::AdminActions action = CTSerialize::AdminActions_Invalid,
    uint64_t userId = 0,
    uint64_t timeoutEpoch = 0,
    const char *reason = nullptr) {
  auto reason__ = reason ? _fbb.CreateString(reason) : 0;
  return CTSerialize::CreateAdminAction(
      _fbb,
      action,
      userId,
      timeoutEpoch,
      reason__);
}

struct GlobedHandshake FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GlobedHandshakeBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GlobedHandshakeTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNTID = 4
  };
  int32_t accountID() const {
    return GetField<int32_t>(VT_ACCOUNTID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ACCOUNTID, 4) &&
           verifier.EndTable();
  }
};

struct GlobedHandshakeBuilder {
  typedef GlobedHandshake Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_accountID(int32_t accountID) {
    fbb_.AddElement<int32_t>(GlobedHandshake::VT_ACCOUNTID, accountID, 0);
  }
  explicit GlobedHandshakeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GlobedHandshake> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GlobedHandshake>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GlobedHandshake> CreateGlobedHandshake(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t accountID = 0) {
  GlobedHandshakeBuilder builder_(_fbb);
  builder_.add_accountID(accountID);
  return builder_.Finish();
}

inline bool VerifyMessageBody(::flatbuffers::Verifier &verifier, const void *obj, MessageBody type) {
  switch (type) {
    case MessageBody_NONE: {
      return true;
    }
    case MessageBody_CreateObjects: {
      auto ptr = reinterpret_cast<const CTSerialize::CreateObjects *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_DeleteObjects: {
      auto ptr = reinterpret_cast<const CTSerialize::DeleteObjects *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_MoveObjects: {
      auto ptr = reinterpret_cast<const CTSerialize::MoveObjects *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_LevelSettingChange: {
      auto ptr = reinterpret_cast<const CTSerialize::LevelSettingChange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_RotateObjects: {
      auto ptr = reinterpret_cast<const CTSerialize::RotateObjects *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_PasteObjects: {
      auto ptr = reinterpret_cast<const CTSerialize::PasteObjects *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_ModifyObjects: {
      auto ptr = reinterpret_cast<const CTSerialize::ModifyObjects *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_ChangeGroupID: {
      auto ptr = reinterpret_cast<const CTSerialize::ChangeGroupID *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_ChangeDefaultColor: {
      auto ptr = reinterpret_cast<const CTSerialize::ChangeDefaultColor *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_RequestLevel: {
      auto ptr = reinterpret_cast<const CTSerialize::RequestLevel *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_ReturnLevelString: {
      auto ptr = reinterpret_cast<const CTSerialize::ReturnLevelString *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_UpdateFont: {
      auto ptr = reinterpret_cast<const CTSerialize::UpdateFont *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_UpdateSong: {
      auto ptr = reinterpret_cast<const CTSerialize::UpdateSong *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_ChangeArt: {
      auto ptr = reinterpret_cast<const CTSerialize::ChangeArt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_SpeedChange: {
      auto ptr = reinterpret_cast<const CTSerialize::SpeedChange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_GameModeChange: {
      auto ptr = reinterpret_cast<const CTSerialize::GameModeChange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_AdminAction: {
      auto ptr = reinterpret_cast<const CTSerialize::AdminAction *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageBody_GlobedHandshake: {
      auto ptr = reinterpret_cast<const CTSerialize::GlobedHandshake *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageBodyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageBody(
        verifier,  values->Get(i), types->GetEnum<MessageBody>(i))) {
      return false;
    }
  }
  return true;
}

inline const ::flatbuffers::TypeTable *MessageBodyTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 2 },
    { ::flatbuffers::ET_SEQUENCE, 0, 3 },
    { ::flatbuffers::ET_SEQUENCE, 0, 4 },
    { ::flatbuffers::ET_SEQUENCE, 0, 5 },
    { ::flatbuffers::ET_SEQUENCE, 0, 6 },
    { ::flatbuffers::ET_SEQUENCE, 0, 7 },
    { ::flatbuffers::ET_SEQUENCE, 0, 8 },
    { ::flatbuffers::ET_SEQUENCE, 0, 9 },
    { ::flatbuffers::ET_SEQUENCE, 0, 10 },
    { ::flatbuffers::ET_SEQUENCE, 0, 11 },
    { ::flatbuffers::ET_SEQUENCE, 0, 12 },
    { ::flatbuffers::ET_SEQUENCE, 0, 13 },
    { ::flatbuffers::ET_SEQUENCE, 0, 14 },
    { ::flatbuffers::ET_SEQUENCE, 0, 15 },
    { ::flatbuffers::ET_SEQUENCE, 0, 16 },
    { ::flatbuffers::ET_SEQUENCE, 0, 17 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::CreateObjectsTypeTable,
    CTSerialize::DeleteObjectsTypeTable,
    CTSerialize::MoveObjectsTypeTable,
    CTSerialize::LevelSettingChangeTypeTable,
    CTSerialize::RotateObjectsTypeTable,
    CTSerialize::PasteObjectsTypeTable,
    CTSerialize::ModifyObjectsTypeTable,
    CTSerialize::ChangeGroupIDTypeTable,
    CTSerialize::ChangeDefaultColorTypeTable,
    CTSerialize::RequestLevelTypeTable,
    CTSerialize::ReturnLevelStringTypeTable,
    CTSerialize::UpdateFontTypeTable,
    CTSerialize::UpdateSongTypeTable,
    CTSerialize::ChangeArtTypeTable,
    CTSerialize::SpeedChangeTypeTable,
    CTSerialize::GameModeChangeTypeTable,
    CTSerialize::AdminActionTypeTable,
    CTSerialize::GlobedHandshakeTypeTable
  };
  static const char * const names[] = {
    "NONE",
    "CreateObjects",
    "DeleteObjects",
    "MoveObjects",
    "LevelSettingChange",
    "RotateObjects",
    "PasteObjects",
    "ModifyObjects",
    "ChangeGroupID",
    "ChangeDefaultColor",
    "RequestLevel",
    "ReturnLevelString",
    "UpdateFont",
    "UpdateSong",
    "ChangeArt",
    "SpeedChange",
    "GameModeChange",
    "AdminAction",
    "GlobedHandshake"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_UNION, 19, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *AdminActionsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_CHAR, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::AdminActionsTypeTable
  };
  static const char * const names[] = {
    "Invalid",
    "SteamUserIDBan",
    "DisableInteraction",
    "Kick"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_ENUM, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *MessageHeaderTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UTYPE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::MessageBodyTypeTable
  };
  static const char * const names[] = {
    "body_type",
    "body"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *CreateObjectsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::GDGameObjectMinTypeTable
  };
  static const char * const names[] = {
    "obj"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *DeleteObjectsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 1, -1 }
  };
  static const char * const names[] = {
    "uniqueIDList"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *MoveObjectsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::CCPosTypeTable
  };
  static const char * const names[] = {
    "uniqueID",
    "positionOffset"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *LevelSettingChangeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_USHORT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 }
  };
  static const char * const names[] = {
    "settingID",
    "spawnGroup"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *RotateObjectsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_STRING, 1, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::CCPosTypeTable
  };
  static const char * const names[] = {
    "rotation",
    "anchor",
    "uniqueIDList"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *PasteObjectsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 1, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "uniqueIDList",
    "pastedString"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ModifyObjectsTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 1, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "uniqueIDList",
    "pastedString"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ChangeGroupIDTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_STRING, 1, -1 }
  };
  static const char * const names[] = {
    "groupID",
    "isAdding",
    "uniqueIDList"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ChangeDefaultColorTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_SEQUENCE, 0, 0 },
    { ::flatbuffers::ET_SEQUENCE, 0, 1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::CCColor3BTypeTable,
    CTSerialize::CCHsvValueTypeTable
  };
  static const char * const names[] = {
    "groupID",
    "currentColor",
    "hsv",
    "blending",
    "opacity",
    "copyOpacity",
    "copyColorID"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 7, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *RequestLevelTypeTable() {
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ReturnLevelStringTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 1, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "uniqueIDList",
    "levelString"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *UpdateFontTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_USHORT, 0, -1 }
  };
  static const char * const names[] = {
    "fontID"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *UpdateSongTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_ULONG, 0, -1 }
  };
  static const char * const names[] = {
    "songID"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *ChangeArtTypeTable() {
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *SpeedChangeTypeTable() {
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GameModeChangeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const char * const names[] = {
    "gameMode"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *AdminActionTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_CHAR, 0, 0 },
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    CTSerialize::AdminActionsTypeTable
  };
  static const char * const names[] = {
    "action",
    "userId",
    "timeoutEpoch",
    "reason"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *GlobedHandshakeTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_INT, 0, -1 }
  };
  static const char * const names[] = {
    "accountID"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const CTSerialize::MessageHeader *GetMessageHeader(const void *buf) {
  return ::flatbuffers::GetRoot<CTSerialize::MessageHeader>(buf);
}

inline const CTSerialize::MessageHeader *GetSizePrefixedMessageHeader(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CTSerialize::MessageHeader>(buf);
}

inline bool VerifyMessageHeaderBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CTSerialize::MessageHeader>(nullptr);
}

inline bool VerifySizePrefixedMessageHeaderBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CTSerialize::MessageHeader>(nullptr);
}

inline void FinishMessageHeaderBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CTSerialize::MessageHeader> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageHeaderBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CTSerialize::MessageHeader> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CTSerialize

#endif  // FLATBUFFERS_GENERATED_CTSERIALIZE_CTSERIALIZE_H_
